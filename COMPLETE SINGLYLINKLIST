class Node{
    constructor(val){
        this.data = val
        this.next = null
    }
}
class Singlylinklist{
    constructor(){
        this.head = null;
        this.tail = null;
        this.length = 0
    }
    push(x){
        let newNode = new Node(x)
        if(this.head == null){
            this.head = newNode
            this.tail = newNode
        }
        else{
            this.tail.next  = newNode
            this.tail= newNode
            
        }
        this.length = this.length + 1
        return this.length
    }
    pop(){
        if(this.head == null){
            return "NO node available"
        }
        let a = this.Head
        let b = a
        while(b.next){
            a = b
            b = b.next
        }
        this.tail = a
        this.tail.next = null
        this.length = this.length - 1
        if(this.length == 0){
            this.tail = null
            this.head = null
        }
        return b
    }
    unshift(val){
        let newHead = new Node(val)
        if(this.head == null){
            this.head = newHead
            this.tail = newHead
        }
        else{
            newHead.next = this.head 
            this.head = newHead
        }
        this.length = this.length + 1
        return this.length
    }
    shift(){
        if(this.head == null){
            return "no node available"
        }
        let currentHead = this.head 
        this.head = currentHead.next
        currentHead.next = null
        this.length = this.length - 1
        if(this.tail == 0){
            this.tail = null
        }
        return currentHead
    }
    getNode(index){
        if(index <= 0 || index >= this.length){
            return null
        }
        let counter = 1
        let current = this.head 
        while(counter != index){
            current = current.next
            counter = counter + 1
        }
        return current
    }
    set(index, val){
        var foundNode = this.getNode(index);
        if(foundNode){
            foundNode.val = val;
            return true
        }
        return false
    }
    insert(index, val){
        if(index < 0 || index > this.length){
            return false
        }
        if(index === this.length){
             this.push(val);
            return true 
        }
        if(index === 0){
            this.unshift(val)
            return true
        }
        var newNode = new Node(val);
        var prev = this.get(index - 1);
        var temp = prev.next;
        prev.next = newNode;
        newNode.next = temp;
        this.length++;
        return true
    }
    remove(index){
        if(index < 0 || index >= this.length){
            return undefined
        }
        if(index === 0){
            return this.shift();
        }
        if(index === this.length - 1){
            return this.pop();
        }
        var previousNode = this.getNode(index-1);
        var removed = previousNode.next;
        previousNode.next = removed.next;
        this.length--;
        return removed
    }
    reverse(){
        var Node = this.head;
        this.head = this.tail;
        this.tail = Node;
        var next;
        var prev = null;
        for(var i=0; i < this.length; i++){
            next = Node.next
            Node.next = prev;
            prev = Node;
            node = next;
        }
        return this;
    }
    print(){
        var arr = [];
        var current = this.head 
        while(current){
            arr.push(current.val)
            current = current.next
        }
        console.log(arr)
    }
}
const ar = new Singlylinklist()
